from BanditOpt import ConfigSpace, ConditionalSpace, NominalSpace, OrdinalSpace, ContinuousSpace, Forbidden
from BanditOpt.BO4ML import BO4ML
import numpy as np

search_space = ConfigSpace()
con = ConditionalSpace("test")
p1= NominalSpace(['none', 'weighting'],'p1',default='none')
search_space._add_singleparameter(p1)
p2= NominalSpace(['adaboost', 'decision_tree', 'k_nearest_neighbors', 'liblinear_svc', 'libsvm_svc', 'random_forest'],'p2',default='random_forest')
search_space._add_singleparameter(p2)
p3= NominalSpace(['no_encoding', 'one_hot_encoding'],'p3',default='one_hot_encoding')
search_space._add_singleparameter(p3)
p4= NominalSpace(['minority_coalescer', 'no_coalescense'],'p4',default='minority_coalescer')
search_space._add_singleparameter(p4)
p5= NominalSpace(['mean', 'median', 'most_frequent'],'p5',default='mean')
search_space._add_singleparameter(p5)
p6= NominalSpace(['minmax', 'none', 'normalize', 'quantile_transformer', 'robust_scaler', 'standardize'],'p6',default='standardize')
search_space._add_singleparameter(p6)
p7= NominalSpace(['fast_ica', 'kernel_pca', 'no_preprocessing', 'pca', 'polynomial'],'p7',default='no_preprocessing')
search_space._add_singleparameter(p7)
p8= NominalSpace(['SAMME.R', 'SAMME'],'p8',default='SAMME.R')
search_space._add_singleparameter(p8)
p9= ContinuousSpace([0.01, 2.0],'p9',default=0.1)
search_space._add_singleparameter(p9)
p10= OrdinalSpace([1, 10],'p10',default=1)
search_space._add_singleparameter(p10)
p11= OrdinalSpace([50, 500],'p11',default=50)
search_space._add_singleparameter(p11)
p12= NominalSpace(['gini', 'entropy'],'p12',default='gini')
search_space._add_singleparameter(p12)
p13= ContinuousSpace([0.0, 2.0],'p13',default=0.5)
search_space._add_singleparameter(p13)
p14= NominalSpace([1.0],'p14',default=1.0)
search_space._add_singleparameter(p14)
p15= NominalSpace(['None'],'p15',default='None')
search_space._add_singleparameter(p15)
p16= NominalSpace([0.0],'p16',default=0.0)
search_space._add_singleparameter(p16)
p17= OrdinalSpace([1, 20],'p17',default=1)
search_space._add_singleparameter(p17)
p18= OrdinalSpace([2, 20],'p18',default=2)
search_space._add_singleparameter(p18)
p19= NominalSpace([0.0],'p19',default=0.0)
search_space._add_singleparameter(p19)
p20= OrdinalSpace([1, 100],'p20',default=1)
search_space._add_singleparameter(p20)
p21= NominalSpace([1, 2],'p21',default=2)
search_space._add_singleparameter(p21)
p22= NominalSpace(['uniform', 'distance'],'p22',default='uniform')
search_space._add_singleparameter(p22)
p23= ContinuousSpace([0.03125, 32768.0],'p23',default=1.0)
search_space._add_singleparameter(p23)
p24= NominalSpace(['False'],'p24',default='False')
search_space._add_singleparameter(p24)
p25= NominalSpace(['True'],'p25',default='True')
search_space._add_singleparameter(p25)
p26= NominalSpace([1],'p26',default=1)
search_space._add_singleparameter(p26)
p27= NominalSpace(['hinge', 'squared_hinge'],'p27',default='squared_hinge')
search_space._add_singleparameter(p27)
p28= NominalSpace(['ovr'],'p28',default='ovr')
search_space._add_singleparameter(p28)
p29= NominalSpace(['l1', 'l2'],'p29',default='l2')
search_space._add_singleparameter(p29)
p30= ContinuousSpace([1e-05, 0.1],'p30',default=0.0001)
search_space._add_singleparameter(p30)
p31= ContinuousSpace([0.03125, 32768.0],'p31',default=1.0)
search_space._add_singleparameter(p31)
p32= ContinuousSpace([3.0517578125e-05, 8.0],'p32',default=0.1)
search_space._add_singleparameter(p32)
p33= NominalSpace(['rbf', 'poly', 'sigmoid'],'p33',default='rbf')
search_space._add_singleparameter(p33)
p34= NominalSpace([-1],'p34',default=-1)
search_space._add_singleparameter(p34)
p35= NominalSpace(['True', 'False'],'p35',default='True')
search_space._add_singleparameter(p35)
p36= ContinuousSpace([1e-05, 0.1],'p36',default=0.001)
search_space._add_singleparameter(p36)
p37= NominalSpace(['True', 'False'],'p37',default='True')
search_space._add_singleparameter(p37)
p38= NominalSpace(['gini', 'entropy'],'p38',default='gini')
search_space._add_singleparameter(p38)
p39= NominalSpace(['None'],'p39',default='None')
search_space._add_singleparameter(p39)
p40= ContinuousSpace([0.0, 1.0],'p40',default=0.5)
search_space._add_singleparameter(p40)
p41= NominalSpace(['None'],'p41',default='None')
search_space._add_singleparameter(p41)
p42= NominalSpace([0.0],'p42',default=0.0)
search_space._add_singleparameter(p42)
p43= OrdinalSpace([1, 20],'p43',default=1)
search_space._add_singleparameter(p43)
p44= OrdinalSpace([2, 20],'p44',default=2)
search_space._add_singleparameter(p44)
p45= NominalSpace([0.0],'p45',default=0.0)
search_space._add_singleparameter(p45)
p46= ContinuousSpace([0.0001, 0.5],'p46',default=0.01)
search_space._add_singleparameter(p46)
p47= OrdinalSpace([10, 2000],'p47',default=1000)
search_space._add_singleparameter(p47)
p48= NominalSpace(['uniform', 'normal'],'p48',default='uniform')
search_space._add_singleparameter(p48)
p49= ContinuousSpace([0.7, 0.999],'p49',default=0.75)
search_space._add_singleparameter(p49)
p50= ContinuousSpace([0.001, 0.3],'p50',default=0.25)
search_space._add_singleparameter(p50)
p51= NominalSpace(['parallel', 'deflation'],'p51',default='parallel')
search_space._add_singleparameter(p51)
p52= NominalSpace(['logcosh', 'exp', 'cube'],'p52',default='logcosh')
search_space._add_singleparameter(p52)
p53= NominalSpace(['False', 'True'],'p53',default='False')
search_space._add_singleparameter(p53)
p54= NominalSpace(['poly', 'rbf', 'sigmoid', 'cosine'],'p54',default='rbf')
search_space._add_singleparameter(p54)
p55= OrdinalSpace([10, 2000],'p55',default=100)
search_space._add_singleparameter(p55)
p56= ContinuousSpace([0.5, 0.9999],'p56',default=0.9999)
search_space._add_singleparameter(p56)
p57= NominalSpace(['False', 'True'],'p57',default='False')
search_space._add_singleparameter(p57)
p58= OrdinalSpace([2, 3],'p58',default=2)
search_space._add_singleparameter(p58)
p59= NominalSpace(['True', 'False'],'p59',default='True')
search_space._add_singleparameter(p59)
p60= NominalSpace(['False', 'True'],'p60',default='False')
search_space._add_singleparameter(p60)
p61= ContinuousSpace([-1.0, 1.0],'p61',default=0.0)
search_space._add_singleparameter(p61)
p62= OrdinalSpace([2, 5],'p62',default=3)
search_space._add_singleparameter(p62)
p63= OrdinalSpace([10, 2000],'p63',default=100)
search_space._add_singleparameter(p63)
p64= ContinuousSpace([-1.0, 1.0],'p64',default=0.0)
search_space._add_singleparameter(p64)
p65= OrdinalSpace([2, 5],'p65',default=3)
search_space._add_singleparameter(p65)
p66= ContinuousSpace([3.0517578125e-05, 8.0],'p66',default=1.0)
search_space._add_singleparameter(p66)
con.addConditional(p8,p2,['adaboost'])
con.addConditional(p9,p2,['adaboost'])
con.addConditional(p10,p2,['adaboost'])
con.addConditional(p11,p2,['adaboost'])
con.addConditional(p12,p2,['decision_tree'])
con.addConditional(p13,p2,['decision_tree'])
con.addConditional(p14,p2,['decision_tree'])
con.addConditional(p15,p2,['decision_tree'])
con.addConditional(p16,p2,['decision_tree'])
con.addConditional(p17,p2,['decision_tree'])
con.addConditional(p18,p2,['decision_tree'])
con.addConditional(p19,p2,['decision_tree'])
con.addConditional(p20,p2,['k_nearest_neighbors'])
con.addConditional(p21,p2,['k_nearest_neighbors'])
con.addConditional(p22,p2,['k_nearest_neighbors'])
con.addConditional(p23,p2,['liblinear_svc'])
con.addConditional(p24,p2,['liblinear_svc'])
con.addConditional(p25,p2,['liblinear_svc'])
con.addConditional(p26,p2,['liblinear_svc'])
con.addConditional(p27,p2,['liblinear_svc'])
con.addConditional(p28,p2,['liblinear_svc'])
con.addConditional(p29,p2,['liblinear_svc'])
con.addConditional(p30,p2,['liblinear_svc'])
con.addConditional(p31,p2,['libsvm_svc'])
con.addConditional(p32,p2,['libsvm_svc'])
con.addConditional(p33,p2,['libsvm_svc'])
con.addConditional(p34,p2,['libsvm_svc'])
con.addConditional(p35,p2,['libsvm_svc'])
con.addConditional(p36,p2,['libsvm_svc'])
con.addConditional(p37,p2,['random_forest'])
con.addConditional(p38,p2,['random_forest'])
con.addConditional(p39,p2,['random_forest'])
con.addConditional(p40,p2,['random_forest'])
con.addConditional(p41,p2,['random_forest'])
con.addConditional(p42,p2,['random_forest'])
con.addConditional(p43,p2,['random_forest'])
con.addConditional(p44,p2,['random_forest'])
con.addConditional(p45,p2,['random_forest'])
con.addConditional(p46,p4,['minority_coalescer'])
con.addConditional(p47,p6,['quantile_transformer'])
con.addConditional(p48,p6,['quantile_transformer'])
con.addConditional(p49,p6,['robust_scaler'])
con.addConditional(p50,p6,['robust_scaler'])
con.addConditional(p51,p7,['fast_ica'])
con.addConditional(p52,p7,['fast_ica'])
con.addConditional(p53,p7,['fast_ica'])
con.addConditional(p54,p7,['kernel_pca'])
con.addConditional(p55,p7,['kernel_pca'])
con.addConditional(p56,p7,['pca'])
con.addConditional(p57,p7,['pca'])
con.addConditional(p58,p7,['polynomial'])
con.addConditional(p59,p7,['polynomial'])
con.addConditional(p60,p7,['polynomial'])
con.addConditional(p61,p33,['poly', 'sigmoid'])
con.addConditional(p62,p33,['poly'])
con.addConditional(p63,p53,['True'])
con.addConditional(p64,p54,['poly', 'sigmoid'])
con.addConditional(p65,p54,['poly'])
con.addConditional(p66,p54,['poly', 'rbf'])
myforb = Forbidden()
myforb.addForbidden(p29,"l1",p27,"hinge")
myforb.addForbidden(p24,"False",p29,"l2",p27,"hinge")
myforb.addForbidden(p24,"False",p29,"l1")
myforb.addForbidden(p2,"adaboost",p7,"kernel_pca")
myforb.addForbidden(p2,"decision_tree",p7,"kernel_pca")
myforb.addForbidden(p2,"k_nearest_neighbors",p7,"kernel_pca")
myforb.addForbidden(p2,"libsvm_svc",p7,"kernel_pca")
myforb.addForbidden(p2,"random_forest",p7,"kernel_pca")
myforb.addForbidden(p2,"decision_tree",p7,"kernel_pca")


def new_obj(params):
    print(params)
    return (np.random.uniform(0, 1))
opt = BO4ML(search_space, new_obj,forbidden=myforb,conditional=con,SearchType="BO",
            max_eval=2300, verbose=True, n_job=1, n_point=3,n_init_sample=5)
xopt, fopt, _, eval_count = opt.run()
print(fopt)